title: Potential AMSI Bypass Via .NET Reflection
ruletype: Sigma
author: Markus Neis, @Kostastsale
date: 2018/08/17
description: Detects Request to "amsiInitFailed" that can be used to disable AMSI
    Scanning
detection:
    SELECTION_1:
        EventID: 1
    SELECTION_2:
        Channel: Microsoft-Windows-Sysmon/Operational
    SELECTION_3:
        CommandLine:
        - '*System.Management.Automation.AmsiUtils*'
        - '*amsiInitFailed*'
    SELECTION_4:
        CommandLine: '*[Ref].Assembly.GetType*'
    SELECTION_5:
        CommandLine: '*SetValue($null,$true)*'
    SELECTION_6:
        CommandLine: '*NonPublic,Static*'
    condition: ((SELECTION_1 and SELECTION_2) and (SELECTION_3 or (SELECTION_4 and
        SELECTION_5 and SELECTION_6)))
falsepositives:
- Unlikely
id: 30edb182-aa75-42c0-b0a9-e998bb29067c
level: high
logsource:
    category: process_creation
    product: windows
modified: 2023/02/03
references:
- https://s3cur3th1ssh1t.github.io/Bypass_AMSI_by_manual_modification/
- https://www.mdsec.co.uk/2018/06/exploring-powershell-amsi-and-logging-evasion/
related:
-   id: 4f927692-68b5-4267-871b-073c45f4f6fe
    type: obsoletes
status: test
tags:
- attack.defense_evasion
- attack.t1562.001

